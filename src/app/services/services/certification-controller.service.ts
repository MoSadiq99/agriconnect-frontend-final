/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Certification } from '../models/certification';
import { certifyFarmer } from '../fn/certification-controller/certify-farmer';
import { CertifyFarmer$Params } from '../fn/certification-controller/certify-farmer';
import { expireCertifications } from '../fn/certification-controller/expire-certifications';
import { ExpireCertifications$Params } from '../fn/certification-controller/expire-certifications';
import { getFarmerCertifications } from '../fn/certification-controller/get-farmer-certifications';
import { GetFarmerCertifications$Params } from '../fn/certification-controller/get-farmer-certifications';

@Injectable({ providedIn: 'root' })
export class CertificationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `expireCertifications()` */
  static readonly ExpireCertificationsPath = '/api/certifications/expire';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expireCertifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  expireCertifications$Response(params?: ExpireCertifications$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return expireCertifications(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expireCertifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expireCertifications(params?: ExpireCertifications$Params, context?: HttpContext): Observable<void> {
    return this.expireCertifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `certifyFarmer()` */
  static readonly CertifyFarmerPath = '/api/certifications/certify/{farmerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `certifyFarmer()` instead.
   *
   * This method doesn't expect any request body.
   */
  certifyFarmer$Response(params: CertifyFarmer$Params, context?: HttpContext): Observable<StrictHttpResponse<Certification>> {
    return certifyFarmer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `certifyFarmer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  certifyFarmer(params: CertifyFarmer$Params, context?: HttpContext): Observable<Certification> {
    return this.certifyFarmer$Response(params, context).pipe(
      map((r: StrictHttpResponse<Certification>): Certification => r.body)
    );
  }

  /** Path part for operation `getFarmerCertifications()` */
  static readonly GetFarmerCertificationsPath = '/api/certifications/{farmerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFarmerCertifications()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFarmerCertifications$Response(params: GetFarmerCertifications$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Certification>>> {
    return getFarmerCertifications(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFarmerCertifications$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFarmerCertifications(params: GetFarmerCertifications$Params, context?: HttpContext): Observable<Array<Certification>> {
    return this.getFarmerCertifications$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Certification>>): Array<Certification> => r.body)
    );
  }

}
